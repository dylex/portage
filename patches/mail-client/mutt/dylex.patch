diff --git a/OPS b/OPS
index b0441d0c3..1a2c7548e 100644
--- a/OPS
+++ b/OPS
@@ -415,6 +415,12 @@ OP_DISPLAY_MESSAGE N_("display a message")
  */
 OP_EDIT_LABEL N_("add, change, or delete a message's label")
 
+/* L10N: Help screen description for OP_EDIT_EXPIRES
+   index menu: <edit-expiration>
+   pager menu: <edit-expiration>
+ */
+OP_EDIT_EXPIRES N_("edit the message EXPIRES date")
+
 /* L10N: Help screen description for OP_EDIT_MESSAGE
    index menu: <edit>
    pager menu: <edit>
diff --git a/commands.c b/commands.c
index 88f399f6b..bf36abe7c 100644
--- a/commands.c
+++ b/commands.c
@@ -674,9 +674,9 @@ int mutt_select_sort (int reverse)
         * string.  Note that mutt now supports multiline prompts, so
         * it's okay for the translation to take up to three lines.
         */
-	_("Rev-Sort Date/Frm/Recv/Subj/tO/Thread/Unsort/siZe/sCore/sPam/Label?: ") :
-	_("Sort Date/Frm/Recv/Subj/tO/Thread/Unsort/siZe/sCore/sPam/Label?: "),
-	_("dfrsotuzcpl")))
+	_("Rev-Sort Date/Frm/Recv/Subj/tO/Thread/Unsort/siZe/sCore/sPam/Label/Expire?: ") :
+	_("Sort Date/Frm/Recv/Subj/tO/Thread/Unsort/siZe/sCore/sPam/Label/Expire?: "),
+	_("dfrsotuzcple")))
   {
     case -1: /* abort - don't resort */
       return -1;
@@ -724,6 +724,10 @@ int mutt_select_sort (int reverse)
     case 11: /* (l)abel */
       Sort = SORT_LABEL;
       break;
+
+    case 12: /* (e)xpires */
+      Sort = SORT_EXPIRES;
+      break;
   }
   if (reverse)
     Sort |= SORT_REVERSE;
@@ -1188,6 +1192,66 @@ int mutt_edit_content_type (HEADER *h, BODY *b, FILE *fp)
   return structure_changed;
 }
 
+static void _mutt_set_expires (HEADER *h, const char *exp, time_t expt)
+{
+	if (!h)
+		return;
+	if (!h->env->expires && !exp)
+		return;
+	if (h->env->expires && exp && !mutt_strcmp (h->env->expires, exp))
+		return;
+	if (h->env->expires)
+		FREE(&h->env->expires);
+	h->env->expires = safe_strdup(exp);
+	h->expires = expt;
+	h->changed |= MUTT_ENV_CHANGED_EXPIRES;
+}
+
+void mutt_edit_expires (HEADER *h)
+{
+	char buf[LONG_STRING] = "";
+	time_t exp;
+
+	if (h && h->env->expires)
+		strncpy(buf, h->env->expires, LONG_STRING);
+
+	if (mutt_get_field("Expires: ", buf, sizeof(buf), 0))
+		return;
+	
+	if (*buf)
+	{
+		char cmd[LONG_STRING];
+		FILE *out;
+		pid_t pid;
+
+		snprintf(cmd, sizeof(cmd), "date -Rd '%s'", buf);
+		if ((pid = mutt_create_filter(cmd, NULL, &out, NULL)) > 0)
+		{
+			size_t n = fread(buf, 1, sizeof(buf)-1, out);
+			safe_fclose(&out);
+			while (n && (buf[n-1] == '\n' || buf[n-1] == '\r'))
+				n--;
+			buf[n] = 0;
+
+			if (mutt_wait_filter(pid))
+			{
+				mutt_error(_("Invalid date format"));
+				return;
+			}
+		}
+	}
+
+	exp = *buf ? mutt_parse_date(buf, NULL) : 0;
+	if (h)
+		_mutt_set_expires(h, *buf ? buf : 0, exp);
+	else
+	{
+		int i;
+		for (i = 0; i < Context->vcount; i++)
+			if (Context->hdrs[Context->v2r[i]]->tagged)
+				_mutt_set_expires(Context->hdrs[Context->v2r[i]], *buf ? buf : 0, exp);
+	}
+}
 
 static int _mutt_check_traditional_pgp (HEADER *h, int *redraw)
 {
diff --git a/copy.c b/copy.c
index 417043fde..8538ba30b 100644
--- a/copy.c
+++ b/copy.c
@@ -102,6 +102,9 @@ mutt_copy_hdr (FILE *in, FILE *out, LOFF_T off_start, LOFF_T off_end, int flags,
 	    (ascii_strncasecmp ("Content-Length:", buf, 15) == 0 ||
 	     ascii_strncasecmp ("Lines:", buf, 6) == 0))
 	  continue;
+	if ((flags & CH_UPDATE_EXPIRES) &&
+	    ascii_strncasecmp ("Expires:", buf, 8) == 0)
+	  continue;
 	if ((flags & CH_UPDATE_REFS) &&
 	    ascii_strncasecmp ("References:", buf, 11) == 0)
 	  continue;
@@ -215,6 +218,9 @@ mutt_copy_hdr (FILE *in, FILE *out, LOFF_T off_start, LOFF_T off_end, int flags,
 	     ascii_strncasecmp ("type:", buf + 8, 5) == 0)) ||
 	   ascii_strncasecmp ("mime-version:", buf, 13) == 0))
 	continue;
+      if ((flags & CH_UPDATE_EXPIRES) &&
+	  ascii_strncasecmp ("Expires:", buf, 8) == 0)
+	continue;
       if ((flags & CH_UPDATE_REFS) &&
 	  ascii_strncasecmp ("References:", buf, 11) == 0)
 	continue;
@@ -372,7 +378,8 @@ mutt_copy_header (FILE *in, HEADER *h, FILE *out, int flags, const char *prefix)
     flags |= ((h->env->changed & MUTT_ENV_CHANGED_IRT) ? CH_UPDATE_IRT : 0)
       | ((h->env->changed & MUTT_ENV_CHANGED_REFS) ? CH_UPDATE_REFS : 0)
       | ((h->env->changed & MUTT_ENV_CHANGED_XLABEL) ? CH_UPDATE_LABEL : 0)
-      | ((h->env->changed & MUTT_ENV_CHANGED_SUBJECT) ? CH_UPDATE_SUBJECT : 0);
+      | ((h->env->changed & MUTT_ENV_CHANGED_SUBJECT) ? CH_UPDATE_SUBJECT : 0)
+      | ((h->env->changed & MUTT_ENV_CHANGED_EXPIRES) ? CH_UPDATE_EXPIRES : 0);
 
   if (mutt_copy_hdr (in, out, h->offset, h->content->offset, flags, prefix) == -1)
     return -1;
@@ -478,6 +485,13 @@ mutt_copy_header (FILE *in, HEADER *h, FILE *out, int flags, const char *prefix)
       FREE (&temp_hdr);
   }
 
+  if (flags & CH_UPDATE_EXPIRES && h->env->expires)
+  {
+    fputs ("Expires: ", out);
+    fputs (h->env->expires, out);
+    fputc ('\n', out);
+  }
+
   if ((flags & CH_NONEWLINE) == 0)
   {
     if (flags & CH_PREFIX)
diff --git a/copy.h b/copy.h
index 198de2603..294534d79 100644
--- a/copy.h
+++ b/copy.h
@@ -56,6 +56,7 @@
 #define CH_DISPLAY        (1<<18) /* display result to user */
 #define CH_UPDATE_LABEL   (1<<19) /* update X-Label: from hdr->env->x_label? */
 #define CH_UPDATE_SUBJECT (1<<20) /* update Subject: protected header update */
+#define CH_UPDATE_EXPIRES (1<<21) /* update Expires: */
 
 
 int mutt_copy_hdr (FILE *, FILE *, LOFF_T, LOFF_T, int, const char *);
diff --git a/curs_main.c b/curs_main.c
index 340697f04..d5c32b2f0 100644
--- a/curs_main.c
+++ b/curs_main.c
@@ -2431,6 +2431,21 @@ int mutt_index_menu (void)
 
 	break;
 
+      case OP_EDIT_EXPIRES:
+
+	CHECK_MSGCOUNT;
+        CHECK_VISIBLE;
+	CHECK_READONLY;
+	CHECK_ACL(MUTT_ACL_WRITE, _("edit expiration"));
+	mutt_edit_expires(tag ? NULL : CURHDR);
+	if (menu->menu == MENU_PAGER)
+	{
+	  op = OP_DISPLAY_MESSAGE;
+	  continue;
+	}
+
+	break;
+
       case OP_FORWARD_MESSAGE:
 
 	CHECK_MSGCOUNT;
diff --git a/doc/Makefile.am b/doc/Makefile.am
index 0d68693b0..937c8507c 100644
--- a/doc/Makefile.am
+++ b/doc/Makefile.am
@@ -165,10 +165,10 @@ stamp-doc-rc: $(top_srcdir)/init.h makedoc.pl $(srcdir)/Muttrc.head
 	touch stamp-doc-rc
 
 manual.html: $(srcdir)/html.xsl $(srcdir)/mutt.xsl stamp-doc-xml $(srcdir)/mutt.css
-	-xsltproc --nonet -o $@ $(srcdir)/html.xsl manual.xml
+	-xsltproc -o $@ $(srcdir)/html.xsl manual.xml
 
 stamp-doc-chunked: $(srcdir)/chunk.xsl $(srcdir)/mutt.xsl stamp-doc-xml $(srcdir)/mutt.css
-	-xsltproc --nonet $(srcdir)/chunk.xsl manual.xml
+	-xsltproc $(srcdir)/chunk.xsl manual.xml
 	touch stamp-doc-chunked
 
 $(CHUNKED_DOCFILES): stamp-doc-chunked
diff --git a/functions.h b/functions.h
index d625563e6..65fbd962a 100644
--- a/functions.h
+++ b/functions.h
@@ -163,6 +163,7 @@ const struct menu_func_op_t OpMain[] = { /* map: index */
   { "display-message",           OP_DISPLAY_MESSAGE },
   { "display-toggle-weed",       OP_DISPLAY_HEADERS },
   { "edit",                      OP_EDIT_MESSAGE },
+  { "edit-expiration",		 OP_EDIT_EXPIRES },
   { "edit-label",                OP_EDIT_LABEL },
   { "edit-type",                 OP_EDIT_TYPE },
   { "extract-keys",              OP_EXTRACT_KEYS },
@@ -361,6 +362,7 @@ const struct menu_func_op_t OpPager[] = { /* map: pager */
   { "display-address",           OP_DISPLAY_ADDRESS },
   { "display-toggle-weed",       OP_DISPLAY_HEADERS },
   { "edit",                      OP_EDIT_MESSAGE },
+  { "edit-expiration",	         OP_EDIT_EXPIRES },
   { "edit-label",                OP_EDIT_LABEL },
   { "edit-type",                 OP_EDIT_TYPE },
   { "enter-command",             OP_ENTER_COMMAND },
diff --git a/hcache.c b/hcache.c
index e100e3d3c..2a0c7eac6 100644
--- a/hcache.c
+++ b/hcache.c
@@ -532,6 +532,7 @@ dump_envelope(ENVELOPE * e, unsigned char *d, int *off, int convert)
   d = dump_char(e->message_id, d, off, 0);
   d = dump_char(e->supersedes, d, off, 0);
   d = dump_char(e->date, d, off, 0);
+  d = dump_char(e->expires, d, off, 0);
   d = dump_char(e->x_label, d, off, convert);
 
   d = dump_buffer(e->spam, d, off, convert);
@@ -573,6 +574,7 @@ restore_envelope(ENVELOPE * e, const unsigned char *d, int *off, int convert)
   restore_char(&e->message_id, d, off, 0);
   restore_char(&e->supersedes, d, off, 0);
   restore_char(&e->date, d, off, 0);
+  restore_char(&e->expires, d, off, 0);
   restore_char(&e->x_label, d, off, convert);
 
   restore_buffer(&e->spam, d, off, convert);
diff --git a/hdrline.c b/hdrline.c
index d8dd39acd..f6a999458 100644
--- a/hdrline.c
+++ b/hdrline.c
@@ -710,7 +710,9 @@ hdr_format_str (char *dest,
 
       ch = ' ';
 
-      if (WithCrypto && hdr->security & GOODSIGN)
+      if (hdr->expires && hdr->expires < time(NULL))
+	      ch = 'E';
+      else if (WithCrypto && hdr->security & GOODSIGN)
         ch = 'S';
       else if (WithCrypto && hdr->security & ENCRYPT)
       	ch = 'P';
diff --git a/init.h b/init.h
index e98996052..6fc834f19 100644
--- a/init.h
+++ b/init.h
@@ -107,6 +107,8 @@ const struct mapping_t SortMethods[] = {  /* DT_SORT */
   { "subject",		SORT_SUBJECT },
   { "threads",		SORT_THREADS },
   { "to",		SORT_TO },
+  { "expiration",	SORT_EXPIRES },
+  { "status",		SORT_STATUS },
   { NULL,               0 }
 };
 
@@ -127,6 +129,8 @@ const struct mapping_t SortAuxMethods[] = {  /* DT_SORT_AUX */
   { "spam",		SORT_SPAM },
   { "subject",		SORT_SUBJECT },
   { "to",		SORT_TO },
+  { "expiration",	SORT_EXPIRES },
+  { "status",		SORT_STATUS },
   { NULL,               0 }
 };
 
@@ -4280,6 +4284,11 @@ struct option_t MuttVars[] = {
   ** You may optionally use the ``reverse-'' prefix to specify reverse sorting
   ** order (example: ``\fCset sort_browser_mailboxes=reverse-alpha\fP'').
   */
+  { "sort_domain",	DT_BOOL, R_INDEX|R_RESORT, {.l=OPTSORTDOMAIN}, {.l=0} },
+  /*
+  ** .pp
+  ** When sorting by addresses (to or from), sort according to domain and user.
+  */
   { "sort_re",		DT_BOOL, R_INDEX|R_RESORT|R_RESORT_INIT, {.l=OPTSORTRE}, {.l=1} },
   /*
   ** .pp
diff --git a/mbox.c b/mbox.c
index fc36ca224..6db431ba1 100644
--- a/mbox.c
+++ b/mbox.c
@@ -596,6 +596,7 @@ static int strict_cmp_envelopes (const ENVELOPE *e1, const ENVELOPE *e2)
   {
     if (mutt_strcmp (e1->message_id, e2->message_id) ||
 	mutt_strcmp (e1->subject, e2->subject) ||
+	mutt_strcmp (e1->expires, e2->expires) ||
 	!strict_cmp_lists (e1->references, e2->references) ||
 	!strict_addrcmp (e1->from, e2->from) ||
 	!strict_addrcmp (e1->sender, e2->sender) ||
diff --git a/mutt.h b/mutt.h
index a888b2686..3876bfcac 100644
--- a/mutt.h
+++ b/mutt.h
@@ -557,6 +557,7 @@ enum
   OPTSIZESHOWMB,
   OPTSIZESHOWFRACTIONS,
   OPTSIZEUNITSONLEFT,
+  OPTSORTDOMAIN,
   OPTSORTRE,
   OPTSPAMSEP,
   OPTSTATUSONTOP,
@@ -726,6 +727,7 @@ typedef struct alias
 #define MUTT_ENV_CHANGED_REFS    (1<<1)  /* References changed to break thread */
 #define MUTT_ENV_CHANGED_XLABEL  (1<<2)  /* X-Label edited */
 #define MUTT_ENV_CHANGED_SUBJECT (1<<3)  /* Protected header update */
+#define MUTT_ENV_CHANGED_EXPIRES (1<<4)
 
 #ifdef USE_AUTOCRYPT
 typedef struct autocrypt
@@ -755,6 +757,7 @@ typedef struct envelope
   char *message_id;
   char *supersedes;
   char *date;
+  char *expires;
   char *x_label;
   BUFFER *spam;
   LIST *references;		/* message references (in reverse order) */
@@ -895,7 +898,6 @@ typedef struct header
   unsigned int attach_del : 1; 		/* has an attachment marked for deletion */
   unsigned int old : 1;
   unsigned int read : 1;
-  unsigned int expired : 1; 		/* already expired? */
   unsigned int superseded : 1; 		/* got superseded? */
   unsigned int replied : 1;
   unsigned int subject_changed : 1; 	/* used for threading */
@@ -932,6 +934,7 @@ typedef struct header
 
   time_t date_sent;     	/* time when the message was sent (UTC) */
   time_t received;      	/* time when the message was placed in the mailbox */
+  time_t expires;
   LOFF_T offset;          	/* where in the stream does this message begin? */
   int lines;			/* how many lines in the body of this message? */
   int index;			/* the absolute (unsorted) message number */
diff --git a/mutt_idna.c b/mutt_idna.c
index 0a37e6559..da7ce29fd 100644
--- a/mutt_idna.c
+++ b/mutt_idna.c
@@ -303,6 +303,41 @@ const char *mutt_addr_for_display (ADDRESS *a)
   return buff;
 }
 
+/* convert user@domain.com to com.domain!user for sorting purposes */
+const char *mutt_revaddr_for_sort (ADDRESS *a)
+{
+  static char *buff = NULL;
+  char *tmp = NULL;
+  char *user = NULL;
+  char *domain = NULL;
+  char *p, *q;
+  size_t dl;
+
+  FREE (&buff);
+
+  if (mbox_to_udomain (a->mailbox, &user, &domain) == -1)
+    return a->mailbox;
+  if ((tmp = intl_to_local (user, domain, MI_MAY_BE_IRREVERSIBLE)))
+    mbox_to_udomain (tmp, &user, &domain);
+
+  dl = mutt_strlen(domain);
+  safe_realloc (&buff, dl + mutt_strlen (user) + 2);
+
+  q = buff;
+  while ((p = memrchr(domain, '.', dl))) {
+    memcpy(q, p+1, domain+dl-p-1);
+    q += domain+dl-p-1;
+    dl = p-domain;
+    *q++ = '.';
+  }
+  memcpy(q, domain, dl);
+  q += dl;
+  FREE (&tmp);
+  *q++ = '!';
+  strcpy(q, user);
+  return buff;
+}
+
 /* Convert an ENVELOPE structure */
 
 void mutt_env_to_local (ENVELOPE *e)
diff --git a/mutt_idna.h b/mutt_idna.h
index 4bdd627f9..1c482edd2 100644
--- a/mutt_idna.h
+++ b/mutt_idna.h
@@ -48,6 +48,8 @@
 # endif
 #endif /* defined(HAVE_LIBIDN) || defined(HAVE_LIBIDN2) */
 
+const char *mutt_revaddr_for_sort (ADDRESS *a);
+
 
 #ifdef HAVE_ICONV
 int mutt_addrlist_to_intl (ADDRESS *, char **);
diff --git a/muttlib.c b/muttlib.c
index 47e64990a..e744a8721 100644
--- a/muttlib.c
+++ b/muttlib.c
@@ -869,6 +869,7 @@ void mutt_free_envelope (ENVELOPE **p)
   FREE (&(*p)->message_id);
   FREE (&(*p)->supersedes);
   FREE (&(*p)->date);
+  FREE (&(*p)->expires);
   FREE (&(*p)->x_label);
 
   mutt_buffer_free (&(*p)->spam);
@@ -904,6 +905,10 @@ void mutt_merge_envelopes(ENVELOPE* base, ENVELOPE** extra)
   MOVE_ELEM(message_id);
   MOVE_ELEM(supersedes);
   MOVE_ELEM(date);
+  if (!(base->changed & MUTT_ENV_CHANGED_EXPIRES))
+  {
+    MOVE_ELEM(expires);
+  }
   if (!(base->changed & MUTT_ENV_CHANGED_XLABEL))
   {
     MOVE_ELEM(x_label);
diff --git a/parse.c b/parse.c
index 7ed1668f9..a05fe497e 100644
--- a/parse.c
+++ b/parse.c
@@ -1317,9 +1317,12 @@ int mutt_parse_rfc822_line (ENVELOPE *e, HEADER *hdr, char *line, char *p, short
       break;
 
     case 'e':
-      if (!ascii_strcasecmp ("xpires", line + 1) &&
-          hdr && mutt_parse_date (p, NULL) < time (NULL))
-        hdr->expired = 1;
+      if (!ascii_strcasecmp ("xpires", line + 1))
+      {
+        mutt_str_replace (&e->expires, p);
+	if (hdr)
+	  hdr->expires = mutt_parse_date (p, NULL);
+      }
       break;
 
     case 'f':
diff --git a/pattern.c b/pattern.c
index da665f37a..208d714fc 100644
--- a/pattern.c
+++ b/pattern.c
@@ -1346,6 +1346,10 @@ pattern_t *mutt_pattern_comp (/* const */ char *s, int flags, BUFFER *err)
 	    return NULL;
 	  }
 	}
+	else if (tmp->op == MUTT_EXPIRED)
+	{
+	  tmp->max = time(NULL);
+	}
 	implicit = 1;
 	break;
       case '(':
@@ -1615,7 +1619,7 @@ mutt_pattern_exec (struct pattern_t *pat, pattern_exec_flag flags, CONTEXT *ctx,
     case MUTT_ALL:
       return (!pat->not);
     case MUTT_EXPIRED:
-      return (pat->not ^ h->expired);
+      return (pat->not ^ (h->expires && h->expires < pat->max));
     case MUTT_SUPERSEDED:
       return (pat->not ^ h->superseded);
     case MUTT_FLAG:
diff --git a/protos.h b/protos.h
index de3b90431..1d05a0297 100644
--- a/protos.h
+++ b/protos.h
@@ -200,6 +200,7 @@ void mutt_display_address (ENVELOPE *);
 void mutt_display_sanitize (char *);
 void mutt_draw_statusline (int cols, const char *buf, int buflen);
 int mutt_edit_content_type (HEADER *, BODY *, FILE *);
+void mutt_edit_expires (HEADER *);
 void mutt_edit_file (const char *, const char *);
 int mutt_edit_headers (const char *, SEND_CONTEXT *, int);
 char **mutt_envlist (void);
diff --git a/sort.c b/sort.c
index 1c5ee2ce6..39af6f9bd 100644
--- a/sort.c
+++ b/sort.c
@@ -29,6 +29,8 @@
 #include <ctype.h>
 #include <unistd.h>
 
+static time_t Now;
+
 static int compare_score (const void *a, const void *b)
 {
   HEADER **pa = (HEADER **) a;
@@ -87,6 +89,13 @@ const char *mutt_get_name (ADDRESS *a)
   return ("");
 }
 
+static const char *sort_addr (ADDRESS *a)
+{
+  if (option (OPTSORTDOMAIN) && a && a->mailbox)
+    return (mutt_revaddr_for_sort (a));
+  return (mutt_get_name (a));
+}
+
 static int compare_to (const void *a, const void *b)
 {
   HEADER **ppa = (HEADER **) a;
@@ -94,8 +103,8 @@ static int compare_to (const void *a, const void *b)
   char fa[SHORT_STRING];
   const char *fb;
 
-  strfcpy (fa, mutt_get_name ((*ppa)->env->to), SHORT_STRING);
-  fb = mutt_get_name ((*ppb)->env->to);
+  strfcpy (fa, sort_addr ((*ppa)->env->to), SHORT_STRING);
+  fb = sort_addr ((*ppb)->env->to);
   return mutt_strncasecmp (fa, fb, SHORT_STRING);
 }
 
@@ -106,8 +115,8 @@ static int compare_from (const void *a, const void *b)
   char fa[SHORT_STRING];
   const char *fb;
 
-  strfcpy (fa, mutt_get_name ((*ppa)->env->from), SHORT_STRING);
-  fb = mutt_get_name ((*ppb)->env->from);
+  strfcpy (fa, sort_addr ((*ppa)->env->from), SHORT_STRING);
+  fb = sort_addr ((*ppb)->env->from);
   return mutt_strncasecmp (fa, fb, SHORT_STRING);
 }
 
@@ -200,6 +209,32 @@ static int compare_label (const void *a, const void *b)
   return mutt_strcasecmp((*ppa)->env->x_label, (*ppb)->env->x_label);
 }
 
+static int compare_expires (const void *a, const void *b)
+{
+  HEADER **pa = (HEADER **) a;
+  HEADER **pb = (HEADER **) b;
+  int result = 0;
+  if (!(*pa)->expires && !(*pb)->expires);
+  else if (!(*pa)->expires) result = 1;
+  else if (!(*pb)->expires) result = -1;
+  else result = (*pa)->expires - (*pb)->expires;
+  return result;
+}
+
+static int compare_status (const void *a, const void *b)
+{
+  HEADER **pa = (HEADER **) a;
+  HEADER **pb = (HEADER **) b;
+  int result = 0;
+  if (!result) result = (*pb)->deleted - (*pa)->deleted;
+  if (!result) result = (*pb)->old - (*pa)->old;
+  if (!result) result = (*pb)->read - (*pa)->read;
+  if (!result) result = (*pa)->flagged - (*pb)->flagged;
+  if (!result) result = ((*pb)->expires && (*pb)->expires < Now) - ((*pa)->expires && (*pa)->expires < Now);
+  if (!result) result = (*pb)->replied - (*pa)->replied;
+  return result;
+}
+
 sort_t *mutt_get_sort_func (int method)
 {
   switch (method & SORT_MASK)
@@ -224,6 +259,10 @@ sort_t *mutt_get_sort_func (int method)
       return (compare_spam);
     case SORT_LABEL:
       return (compare_label);
+    case SORT_EXPIRES:
+      return (compare_expires);
+    case SORT_STATUS:
+      return (compare_status);
     default:
       return (NULL);
   }
@@ -313,6 +352,8 @@ void mutt_sort_headers (CONTEXT *ctx, int init)
   if (init && ctx->tree)
     mutt_clear_threads (ctx);
 
+  Now = time(NULL);
+
   if ((Sort & SORT_MASK) == SORT_THREADS)
   {
     /* if $sort_aux changed after the mailbox is sorted, then all the
diff --git a/sort.h b/sort.h
index a5eca59a9..8be686faa 100644
--- a/sort.h
+++ b/sort.h
@@ -37,6 +37,8 @@
 #define SORT_LABEL	19
 #define SORT_AUX        20  /* $sort_thread_groups delegation to $sort_aux */
 #define SORT_UID        21  /* used internally by the IMAP code */
+#define SORT_EXPIRES	22
+#define SORT_STATUS	23
 
 /* Sort and sort_aux are shorts, and are a composite of a
  * constant sort operation number and a set of compounded
